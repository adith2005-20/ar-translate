{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div id=\"app\">\n    <h1>Speech Recognition and Translation</h1>\n    <div class=\"container\">\n        <div class=\"language-selector\">\n    <label for=\"language-select\">Select Target Language:</label>\n    <select id=\"language-select\">\n        <option value=\"EN\">English</option>\n        <option value=\"DE\">German</option>\n        <option value=\"FR\">French</option>\n        <option value=\"ES\">Spanish</option>\n        <option value=\"IT\">Italian</option>\n        <option value=\"NL\">Dutch</option>\n        <option value=\"PL\">Polish</option>\n        <option value=\"RU\">Russian</option>\n        <option value=\"PT\">Portuguese</option>\n        <option value=\"AR\">Arabic</option>\n        <option value=\"JA\">Japanese</option>\n        <option value=\"KO\">Korean</option>\n        <option value=\"ZH\">Chinese (Simplified)</option>\n    </select>\n</div>\n        <div class=\"webcam\">\n            <h2>Webcam Feed:</h2>\n            <video id=\"webcam\" autoplay playsinline></video>\n        </div>\n        <div class=\"transcript\">\n            <h2>Transcribed Text:</h2>\n            <p id=\"transcribedText\">Waiting for speech...</p>\n        </div>\n        <div class=\"translation\">\n            <h2>Translated Text:</h2>\n            <p id=\"translatedText\">Waiting for translation...</p>\n        </div>\n    </div>\n</div>\n\n<style>\n    body {\n        font-family: Arial, sans-serif;\n        background-color: #f4f4f4;\n        margin: 0;\n        padding: 20px;\n    }\n\n    #app {\n        max-width: 600px;\n        margin: auto;\n        padding: 20px;\n        background: white;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    }\n\n    h1 {\n        text-align: center;\n        color: #333;\n    }\n\n    .container {\n        display: flex;\n        flex-direction: column;\n        gap: 20px;\n    }\n\n    .language-selector {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .webcam {\n        display: flex;\n        flex-direction: column;\n    }\n\n    video {\n        width: 100%;\n        height: auto;\n        border-radius: 5px;\n    }\n\n    .transcript, .translation {\n        padding: 15px;\n        border-radius: 5px;\n        background-color: #e9ecef;\n    }\n\n    h2 {\n        margin-top: 0;\n    }\n\n    p {\n        margin: 5px 0;\n        color: #555;\n    }\n\t.webcam {\n\t\twidth: 300px; /* Set the desired width */\n\t\theight: auto; /* Maintain aspect ratio */\n\t\toverflow: hidden; /* Hide any overflow */\n\t}\n\n\t#webcam {\n\t\t  width: 100%; /* Make the video fill the container */\n\t\t  height: auto; /* Maintain aspect ratio */\n\t\t  border-radius: 5px; /* Optional: add some styling */\n\t  }\n</style>",
      "status": "",
      "output": "<div id=\"app\">\n    <h1>Speech Recognition and Translation</h1>\n    <div class=\"container\">\n        <div class=\"language-selector\">\n    <label for=\"language-select\">Select Target Language:</label>\n    <select id=\"language-select\">\n        <option value=\"EN\">English</option>\n        <option value=\"DE\">German</option>\n        <option value=\"FR\">French</option>\n        <option value=\"ES\">Spanish</option>\n        <option value=\"IT\">Italian</option>\n        <option value=\"NL\">Dutch</option>\n        <option value=\"PL\">Polish</option>\n        <option value=\"RU\">Russian</option>\n        <option value=\"PT\">Portuguese</option>\n        <option value=\"AR\">Arabic</option>\n        <option value=\"JA\">Japanese</option>\n        <option value=\"KO\">Korean</option>\n        <option value=\"ZH\">Chinese (Simplified)</option>\n    </select>\n</div>\n        <div class=\"webcam\">\n            <h2>Webcam Feed:</h2>\n            <video id=\"webcam\" autoplay=\"\" playsinline=\"\"></video>\n        </div>\n        <div class=\"transcript\">\n            <h2>Transcribed Text:</h2>\n            <p id=\"transcribedText\">Waiting for speech...</p>\n        </div>\n        <div class=\"translation\">\n            <h2>Translated Text:</h2>\n            <p id=\"translatedText\">Waiting for translation...</p>\n        </div>\n    </div>\n</div>\n\n<style>\n    body {\n        font-family: Arial, sans-serif;\n        background-color: #f4f4f4;\n        margin: 0;\n        padding: 20px;\n    }\n\n    #app {\n        max-width: 600px;\n        margin: auto;\n        padding: 20px;\n        background: white;\n        border-radius: 8px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    }\n\n    h1 {\n        text-align: center;\n        color: #333;\n    }\n\n    .container {\n        display: flex;\n        flex-direction: column;\n        gap: 20px;\n    }\n\n    .language-selector {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .webcam {\n        display: flex;\n        flex-direction: column;\n    }\n\n    video {\n        width: 100%;\n        height: auto;\n        border-radius: 5px;\n    }\n\n    .transcript, .translation {\n        padding: 15px;\n        border-radius: 5px;\n        background-color: #e9ecef;\n    }\n\n    h2 {\n        margin-top: 0;\n    }\n\n    p {\n        margin: 5px 0;\n        color: #555;\n    }\n\t.webcam {\n\t\twidth: 300px; /* Set the desired width */\n\t\theight: auto; /* Maintain aspect ratio */\n\t\toverflow: hidden; /* Hide any overflow */\n\t}\n\n\t#webcam {\n\t\t  width: 100%; /* Make the video fill the container */\n\t\t  height: auto; /* Maintain aspect ratio */\n\t\t  border-radius: 5px; /* Optional: add some styling */\n\t  }\n</style>",
      "type": "html"
    },
    {
      "code": "// Initialize variables for transcript and translated text\nlet currentTranscript = \"\";\nlet currentTranslatedText = \"\";\n\n// Request microphone permissions\nasync function requestPermissions() {\n    try {\n        await navigator.mediaDevices.getUserMedia({ audio: true });\n        \n        // Request webcam permissions\n        const videoStream = await navigator.mediaDevices.getUserMedia({ video: true });\n        \n        // Display the webcam feed\n        const videoElement = document.getElementById('webcam');\n        videoElement.srcObject = videoStream;\n\n        console.log(\"Microphone and webcam permissions granted\");\n        \n        startListening(); // Start listening after permissions are granted\n    } catch (error) {\n        console.error(\"Error accessing media devices.\", error);\n    }\n}\n\n// Initialize SpeechRecognition\nlet recognition;\n\nif ('SpeechRecognition' in window) {\n    recognition = new SpeechRecognition();\n} else if ('webkitSpeechRecognition' in window) {\n    recognition = new webkitSpeechRecognition(); // For older versions of Safari\n} else {\n    console.error(\"Speech recognition not supported in this browser.\");\n}\n\n// Set up recognition properties\nrecognition.continuous = true;\nrecognition.interimResults = true;\n\n// Timeout variable for resetting transcribed and translated text\nlet inactivityTimeout;\n\n// Function to reset transcribed and translated text after inactivity\nfunction resetText() {\n    currentTranscript = \"\"; // Clear the transcript variable\n    currentTranslatedText = \"\"; // Clear the translated text variable\n\n    document.getElementById('transcribedText').innerText = \"Waiting for speech...\";\n    document.getElementById('translatedText').innerText = \"Waiting for translation...\";\n}\n\n// Handle results from speech recognition\nrecognition.onresult = async (event) => {\n    const transcript = Array.from(event.results)\n        .map(result => result[0].transcript)\n        .join('');\n    \n    console.log(\"Recognized Text:\", transcript);\n    \n    // Update the displayed transcribed text\n    currentTranscript = transcript; // Store the transcript in the variable\n    document.getElementById('transcribedText').innerText = currentTranscript;\n\n    // Clear previous timeout and set a new one for inactivity\n    clearTimeout(inactivityTimeout);\n    inactivityTimeout = setTimeout(resetText, 10000); // Reset after 10 seconds\n\n    // Get selected language from dropdown\n    const selectedLanguage = document.getElementById('language-select').value;\n\n    // Call your translation function here\n    const translatedText = await translateText(currentTranscript, selectedLanguage); // Use selected language\n    console.log(\"Translated Text:\", translatedText);\n\n    currentTranslatedText = translatedText || \"Translation failed.\"; // Store the translated text in the variable\n    // Update the displayed translated text\n    document.getElementById('translatedText').innerText = currentTranslatedText;\n};\n\n// Event listener for language change\ndocument.getElementById('language-select').addEventListener('change', async () => {\n    if (currentTranscript && currentTranscript !== \"Waiting for speech...\") {\n        const selectedLanguage = document.getElementById('language-select').value;\n        \n        const translatedText = await translateText(currentTranscript, selectedLanguage);\n        currentTranslatedText = translatedText || \"Translation failed.\"; // Store updated translation in variable\n        document.getElementById('translatedText').innerText = currentTranslatedText;\n    }\n});\n\n// Start listening function\nfunction startListening() {\n    recognition.start();\n}\n\n// Translate recognized text using DeepL API\nasync function translateText(text, targetLanguage) {\n   const apiKey = '3082f1a7-1538-4bfa-baa1-fe99d3944503:fx'; // Replace with your actual API key\n   const url = `https://api-free.deepl.com/v2/translate?auth_key=${apiKey}&text=${encodeURIComponent(text)}&target_lang=${targetLanguage}`;\n   \n   const response = await fetch(url, {\n       method: 'POST',\n       headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n       },\n   });\n   \n   if (!response.ok) {\n       console.error(\"Error with translation API:\", response.statusText);\n       return null;\n   }\n\n   const data = await response.json();\n   \n   if (data.translations && data.translations.length > 0) {\n       return data.translations[0].text; // Return translated text\n   } else {\n       console.error(\"No translations found.\");\n       return null;\n   }\n}\n\n// Start the application\nrequestPermissions();",
      "status": "[26]<br><span style=\"font-size:8px\">102ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}