{
  "metadata": {
    "name": "ar-translate(v2.1)",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AR-Translate</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n    <style>\n        /* Base Styling */\n        body {\n            font-family: Arial, sans-serif;\n            background: linear-gradient(135deg, #1d1d1f, #3a3a3d);\n            color: #fff;\n            margin: 0;\n            padding: 0;\n            overflow-x: hidden;\n        }\n\n        #app {\n            max-width: 800px;\n            margin: auto;\n            padding: 20px;\n            text-align: center;\n            position: relative;\n        }\n\n        h1 {\n            font-size: 4em;\n            font-weight: bold;\n            text-transform: uppercase;\n            background: linear-gradient(135deg, #ff5722, #f44336);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            margin-bottom: 0.5em;\n        }\n\n        .container {\n            display: flex;\n            flex-direction: column;\n            gap: 20px;\n        }\n\n        .blob {\n            position: absolute;\n            width: 200px;\n            height: 200px;\n            background: radial-gradient(circle, #ff5722, #f44336, #3f51b5);\n            filter: blur(100px);\n            animation: float 6s ease-in-out infinite;\n            z-index: -1;\n        }\n\n        @keyframes float {\n            0%, 100% { transform: translateY(-10px); }\n            50% { transform: translateY(10px); }\n        }\n\n        /* Video Section */\n        .webcam {\n            position: relative;\n            margin: 20px 0;\n        }\n\n        video {\n            width: 100%;\n            height: auto;\n            border-radius: 10px;\n        }\n\n        /* Controls for Camera and Microphone */\n        .controls {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            display: flex;\n            gap: 10px;\n        }\n\n        .control-button {\n            width: 50px;\n            height: 50px;\n            background-color: rgba(0, 0, 0, 0.7);\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: #fff;\n            font-size: 1.5em;\n            cursor: pointer;\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n        }\n\n        .control-button:hover {\n            transform: scale(1.1);\n            box-shadow: 0 0 10px rgba(255, 87, 34, 0.7);\n        }\n\n        .control-button.active {\n            box-shadow: 0 0 15px rgba(255, 87, 34, 1);\n            color: #ff5722;\n        }\n\n        /* Language Selector and Text Display */\n        select, button {\n            padding: 10px;\n            margin-top: 10px;\n            font-size: 1em;\n            border-radius: 20px;\n            background-color: #444;\n            color: #fff;\n            cursor: pointer;\n            transition: background 0.3s ease;\n            border: none; \n        }\n\n        select:hover, button:hover {\n           background-color:#ff5722; \n        }\n\n        .language-selector, .transcript, .translation {\n           margin-top :20px; \n           padding :15px; \n           background :rgba(255,255,255,.1); \n           border-radius :5px; \n           backdrop-filter :blur(10px); \n           color :#ccc; \n           box-shadow :0 10px 20px rgba(0,0,0,.2); \n       }\n\n       /* Speech Bubble Canvas Styling */\n       #speechBubble {\n           position:absolute; /* Position it over the webcam */\n           top :0; \n           left :0; \n           pointer-events:none; /* Allow clicks to pass through */\n           z-index :2; \n       }\n    </style>\n</head>\n<body>\n    <div id=\"app\">\n        <div class=\"blob\"></div>\n        <h1>AR-Translate</h1>\n        <p>Speech Translation made easy</p>\n\n        <div class=\"language-selector\">\n          <label for=\"language-select\">Select Target Language:</label>\n          <select id=\"language-select\">\n              <option value=\"EN\">English</option>\n              <option value=\"DE\">German</option>\n              <option value=\"FR\">French</option>\n              <option value=\"ES\">Spanish</option>\n              <option value=\"IT\">Italian</option>\n              <option value=\"NL\">Dutch</option>\n              <option value=\"PL\">Polish</option>\n              <option value=\"RU\">Russian</option>\n              <option value=\"PT\">Portuguese</option>\n              <option value=\"AR\">Arabic</option>\n              <option value=\"JA\">Japanese</option>\n              <option value=\"KO\">Korean</option>\n              <option value=\"ZH\">Chinese (Simplified)</option>\n          </select>\n      </div>\n\n      <div class=\"webcam\">\n          <video id=\"webcam\" autoplay playsinline></video>\n          <!-- Canvas for speech bubble -->\n          <canvas id=\"speechBubble\"></canvas>\n          <div class=\"controls\">\n              <div id=\"toggleCamera\" class=\"control-button\">\n                  <i class=\"fas fa-camera\"></i>\n              </div>\n              <div id=\"toggleMicrophone\" class=\"control-button\">\n                  <i class=\"fas fa-microphone\"></i>\n              </div>\n          </div>\n      </div>\n\n      <div class=\"transcript\">\n          <h2>Transcribed Text:</h2>\n          <p id=\"transcribedText\">Waiting for speech...</p>\n      </div>\n\n      <div class=\"translation\">\n          <h2>Translated Text:</h2>\n          <p id=\"translatedText\">Waiting for translation...</p>\n      </div>\n\n    </div>\n\n</body>\n</html>",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AR-Translate</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n    <style>\n        /* Base Styling */\n        body {\n            font-family: Arial, sans-serif;\n            background: linear-gradient(135deg, #1d1d1f, #3a3a3d);\n            color: #fff;\n            margin: 0;\n            padding: 0;\n            overflow-x: hidden;\n        }\n\n        #app {\n            max-width: 800px;\n            margin: auto;\n            padding: 20px;\n            text-align: center;\n            position: relative;\n        }\n\n        h1 {\n            font-size: 4em;\n            font-weight: bold;\n            text-transform: uppercase;\n            background: linear-gradient(135deg, #ff5722, #f44336);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            margin-bottom: 0.5em;\n        }\n\n        .container {\n            display: flex;\n            flex-direction: column;\n            gap: 20px;\n        }\n\n        .blob {\n            position: absolute;\n            width: 200px;\n            height: 200px;\n            background: radial-gradient(circle, #ff5722, #f44336, #3f51b5);\n            filter: blur(100px);\n            animation: float 6s ease-in-out infinite;\n            z-index: -1;\n        }\n\n        @keyframes float {\n            0%, 100% { transform: translateY(-10px); }\n            50% { transform: translateY(10px); }\n        }\n\n        /* Video Section */\n        .webcam {\n            position: relative;\n            margin: 20px 0;\n        }\n\n        video {\n            width: 100%;\n            height: auto;\n            border-radius: 10px;\n        }\n\n        /* Controls for Camera and Microphone */\n        .controls {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            display: flex;\n            gap: 10px;\n        }\n\n        .control-button {\n            width: 50px;\n            height: 50px;\n            background-color: rgba(0, 0, 0, 0.7);\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: #fff;\n            font-size: 1.5em;\n            cursor: pointer;\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n        }\n\n        .control-button:hover {\n            transform: scale(1.1);\n            box-shadow: 0 0 10px rgba(255, 87, 34, 0.7);\n        }\n\n        .control-button.active {\n            box-shadow: 0 0 15px rgba(255, 87, 34, 1);\n            color: #ff5722;\n        }\n\n        /* Language Selector and Text Display */\n        select, button {\n            padding: 10px;\n            margin-top: 10px;\n            font-size: 1em;\n            border-radius: 20px;\n            background-color: #444;\n            color: #fff;\n            cursor: pointer;\n            transition: background 0.3s ease;\n            border: none; \n        }\n\n        select:hover, button:hover {\n           background-color:#ff5722; \n        }\n\n        .language-selector, .transcript, .translation {\n           margin-top :20px; \n           padding :15px; \n           background :rgba(255,255,255,.1); \n           border-radius :5px; \n           backdrop-filter :blur(10px); \n           color :#ccc; \n           box-shadow :0 10px 20px rgba(0,0,0,.2); \n       }\n\n       /* Speech Bubble Canvas Styling */\n       #speechBubble {\n           position:absolute; /* Position it over the webcam */\n           top :0; \n           left :0; \n           pointer-events:none; /* Allow clicks to pass through */\n           z-index :2; \n       }\n    </style>\n\n\n    <div id=\"app\">\n        <div class=\"blob\"></div>\n        <h1>AR-Translate</h1>\n        <p>Speech Translation made easy</p>\n\n        <div class=\"language-selector\">\n          <label for=\"language-select\">Select Target Language:</label>\n          <select id=\"language-select\">\n              <option value=\"EN\">English</option>\n              <option value=\"DE\">German</option>\n              <option value=\"FR\">French</option>\n              <option value=\"ES\">Spanish</option>\n              <option value=\"IT\">Italian</option>\n              <option value=\"NL\">Dutch</option>\n              <option value=\"PL\">Polish</option>\n              <option value=\"RU\">Russian</option>\n              <option value=\"PT\">Portuguese</option>\n              <option value=\"AR\">Arabic</option>\n              <option value=\"JA\">Japanese</option>\n              <option value=\"KO\">Korean</option>\n              <option value=\"ZH\">Chinese (Simplified)</option>\n          </select>\n      </div>\n\n      <div class=\"webcam\">\n          <video id=\"webcam\" autoplay=\"\" playsinline=\"\"></video>\n          <!-- Canvas for speech bubble -->\n          <canvas id=\"speechBubble\"></canvas>\n          <div class=\"controls\">\n              <div id=\"toggleCamera\" class=\"control-button active\">\n                  <i class=\"fas fa-camera\"></i>\n              </div>\n              <div id=\"toggleMicrophone\" class=\"control-button active\">\n                  <i class=\"fas fa-microphone\"></i>\n              </div>\n          </div>\n      </div>\n\n      <div class=\"transcript\">\n          <h2>Transcribed Text:</h2>\n          <p id=\"transcribedText\">Waiting for speech...</p>\n      </div>\n\n      <div class=\"translation\">\n          <h2>Translated Text:</h2>\n          <p id=\"translatedText\">Waiting for translation...</p>\n      </div>\n\n    </div>\n\n\n",
      "type": "html"
    },
    {
      "code": "// Load face-api.js library\nasync function loadFaceApi() {\n    const script = document.createElement('script');\n    script.src = \"https://cdn.jsdelivr.net/npm/@vladmandic/face-api@1/dist/face-api.js\";\n    document.head.appendChild(script);\n    script.onload = () => console.log(\"Face API loaded\");\n}\n\nawait loadFaceApi();\n\nlet currentTranscript = \"\";\nlet currentTranslatedText = \"\";\n\nasync function requestPermissions() {\n    try {\n        const videoStream = await navigator.mediaDevices.getUserMedia({ video: true });\n        const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n        const videoElement = document.getElementById('webcam');\n        videoElement.srcObject = videoStream;\n\n        console.log(\"Microphone and webcam permissions granted\");\n        startListening();\n    } catch (error) {\n        console.error(\"Error accessing media devices.\", error);\n    }\n}\n\nlet recognition;\n\nif ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n    recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n} else {\n    console.error(\"Speech recognition not supported in this browser.\");\n}\n\nrecognition.continuous = true;\nrecognition.interimResults = true;\n\nlet inactivityTimeout;\n\nfunction resetText() {\n    currentTranscript = \"\"; \n    currentTranslatedText = \"\"; \n    document.getElementById('transcribedText').innerText = \"Waiting for speech...\";\n    document.getElementById('translatedText').innerText = \"Waiting for translation...\";\n}\n\nrecognition.onresult = async (event) => {\n    const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n    console.log(\"Recognized Text:\", transcript);\n\n    currentTranscript = transcript;\n    document.getElementById('transcribedText').innerText = currentTranscript;\n\n    clearTimeout(inactivityTimeout);\n    inactivityTimeout = setTimeout(resetText, 10000);\n\n    const selectedLanguage = document.getElementById('language-select').value;\n    const translatedText = await translateText(currentTranscript, selectedLanguage);\n    \n    console.log(\"Translated Text:\", translatedText);\n    currentTranslatedText = translatedText || \"Translation failed.\";\n    document.getElementById('translatedText').innerText = currentTranslatedText;\n\n    drawSpeechBubble(currentTranslatedText);\n};\n\ndocument.getElementById('language-select').addEventListener('change', async () => {\n    if (currentTranscript && currentTranscript !== \"Waiting for speech...\") {\n        const selectedLanguage = document.getElementById('language-select').value;\n        const translatedText = await translateText(currentTranscript, selectedLanguage);\n\n        currentTranslatedText = translatedText || \"Translation failed.\";\n        document.getElementById('translatedText').innerText = currentTranslatedText;\n        drawSpeechBubble(currentTranslatedText);\n    }\n});\n\nfunction startListening() {\n    recognition.start();\n}\n\nasync function translateText(text, targetLanguage) {\n    const apiKey = '3082f1a7-1538-4bfa-baa1-fe99d3944503:fx'; // Replace with your actual Deepl API Key\n    const url = `https://api-free.deepl.com/v2/translate?auth_key=${apiKey}&text=${encodeURIComponent(text)}&target_lang=${targetLanguage}`;\n\n    const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' } });\n    \n    if (!response.ok) {\n        console.error(\"Error with translation API:\", response.statusText);\n        return null;\n    }\n\n    const data = await response.json();\n    return data.translations && data.translations.length > 0 ? data.translations[0].text : null;\n}\n\nconst vidfeed = document.getElementById(\"webcam\");\nconst speechBubbleCanvas = document.getElementById(\"speechBubble\");\nconst speechBubbleCtx = speechBubbleCanvas.getContext('2d');\n\nfunction drawSpeechBubble(text) {\n    const padding = 12; // Padding around text inside the bubble\n    const bubblePadding = 8; // Padding inside the speech bubble\n    const maxWords = 5; // Limit to 5 words for display\n\n    // Split text into words and limit to the last 'maxWords' words\n    const words = text.split(\" \");\n    const displayText = words.length > maxWords ? words.slice(-maxWords).join(\" \") : text;\n\n    if (!displayText) return;\n\n    // Calculate bubble dimensions based on the text length\n    const textWidth = speechBubbleCtx.measureText(displayText).width;\n    const bubbleWidth = textWidth + padding * 2 + bubblePadding * 2; // Bubble width\n    const bubbleHeight = 50; // Fixed height for the bubble\n\n    // Clear the canvas before drawing a new bubble\n    speechBubbleCtx.clearRect(0, 0, speechBubbleCanvas.width, speechBubbleCanvas.height);\n\n    // Set bubble position at the bottom of the canvas\n    const xPos = (speechBubbleCanvas.width - bubbleWidth) / 2 + padding;\n    const yPos = 50; // 20px margin from the bottom\n\n    // Draw the speech bubble background with rounded corners and shadow\n    speechBubbleCtx.fillStyle = \"rgba(252, 155, 172, 0.8)\"; // Light pink background with transparency\n    speechBubbleCtx.shadowColor = \"rgba(66, 191, 221, 0.2)\"; // Light blue shadow\n    speechBubbleCtx.shadowOffsetX = 2; // Horizontal shadow offset\n    speechBubbleCtx.shadowOffsetY = 2; // Vertical shadow offset\n    speechBubbleCtx.shadowBlur = 10; // Blur radius for the shadow\n\n    // Begin path to draw the bubble\n    speechBubbleCtx.beginPath();\n    speechBubbleCtx.moveTo(xPos + bubblePadding, yPos); // Start at the top-left corner\n    speechBubbleCtx.lineTo(xPos + bubbleWidth - bubblePadding, yPos); // Top-right corner\n    speechBubbleCtx.quadraticCurveTo(xPos + bubbleWidth, yPos, xPos + bubbleWidth, yPos + bubblePadding); // Top-right curve\n    speechBubbleCtx.lineTo(xPos + bubbleWidth, yPos + bubbleHeight - bubblePadding); // Right side\n    speechBubbleCtx.quadraticCurveTo(xPos + bubbleWidth, yPos + bubbleHeight, xPos + bubbleWidth - bubblePadding, yPos + bubbleHeight); // Bottom-right curve\n    speechBubbleCtx.lineTo(xPos + bubblePadding, yPos + bubbleHeight); // Bottom-left corner\n    speechBubbleCtx.quadraticCurveTo(xPos, yPos + bubbleHeight, xPos, yPos + bubbleHeight - bubblePadding); // Bottom-left curve\n    speechBubbleCtx.lineTo(xPos, yPos + bubblePadding); // Left side\n    speechBubbleCtx.quadraticCurveTo(xPos, yPos, xPos + bubblePadding, yPos); // Top-left curve\n    speechBubbleCtx.closePath(); // Close the path to complete the bubble\n\n    // Fill the bubble with color\n    speechBubbleCtx.fill();\n\n    // Reset shadow to avoid affecting the text\n    speechBubbleCtx.shadowColor = \"transparent\";\n\n    // Draw the text inside the bubble, centered\n    speechBubbleCtx.fillStyle = \"#333\"; // Dark text color for better contrast\n    speechBubbleCtx.font = \"16px Arial\"; // Font style and size\n    speechBubbleCtx.textBaseline = \"middle\"; // Vertically center the text\n\n    // Position the text inside the bubble\n    speechBubbleCtx.fillText(displayText, xPos + padding, yPos + bubbleHeight / 2);\n}\n\n\n\nwindow.addEventListener('resize', () => {\n    const vidSize = { width: vidfeed.clientWidth, height: vidfeed.clientHeight };\n    speechBubbleCanvas.width = vidSize.width;\n    speechBubbleCanvas.height = vidSize.height;\n});\n\nlet videoStream, audioStream;\nlet cameraActive = false;\nlet micActive = false;\n\nasync function toggleCamera() {\n    const button = document.getElementById(\"toggleCamera\");\n    if (cameraActive) {\n        videoStream.getTracks().forEach(track => track.stop());\n        cameraActive = false;\n        button.classList.remove(\"active\");\n    } else {\n        videoStream = await navigator.mediaDevices.getUserMedia({ video: true });\n        vidfeed.srcObject = videoStream;\n        cameraActive = true;\n        button.classList.add(\"active\");\n    }\n}\n\nasync function toggleMicrophone() {\n    const button = document.getElementById(\"toggleMicrophone\");\n    if (micActive) {\n        audioStream.getTracks().forEach(track => track.stop());\n        micActive = false;\n        button.classList.remove(\"active\");\n    } else {\n        audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        micActive = true;\n        button.classList.add(\"active\");\n    }\n}\n\ndocument.getElementById(\"toggleCamera\").addEventListener(\"click\", toggleCamera);\ndocument.getElementById(\"toggleMicrophone\").addEventListener(\"click\", toggleMicrophone);\n\nrequestPermissions();\n",
      "status": "[44]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}