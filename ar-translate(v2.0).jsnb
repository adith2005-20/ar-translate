{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<h2 style=\"color: white;\">ar-translate</h2>\n\n<h3>What is ar-translate?</h3>\n<p style=\"color: white;\">This web application captures spoken words üé§, translates them into a chosen language using AI üåê, and displays the translated text in a dynamic speech bubble above the user‚Äôs head via webcam input üì∏.</p>\n\n<h5>Features:</h5>\n<ul>\n  <li>üéôÔ∏è <strong>Real-time Speech Recognition</strong>: Instantly captures and converts speech to text.</li>\n  <li>üåç <strong>Language Translation</strong>: Translates recognized speech to the selected language.</li>\n  <li>üí¨ <strong>Speech Bubble Overlay</strong>: Displays the translated phrase in a speech bubble over the user‚Äôs head.</li>\n</ul>",
      "status": "",
      "output": "<h2 style=\"color: white;\">ar-translate</h2>\n\n<h3>What is ar-translate?</h3>\n<p style=\"color: white;\">This web application captures spoken words üé§, translates them into a chosen language using AI üåê, and displays the translated text in a dynamic speech bubble above the user‚Äôs head via webcam input üì∏.</p>\n\n<h5>Features:</h5>\n<ul>\n  <li>üéôÔ∏è <strong>Real-time Speech Recognition</strong>: Instantly captures and converts speech to text.</li>\n  <li>üåç <strong>Language Translation</strong>: Translates recognized speech to the selected language.</li>\n  <li>üí¨ <strong>Speech Bubble Overlay</strong>: Displays the translated phrase in a speech bubble over the user‚Äôs head.</li>\n</ul>",
      "type": "html"
    },
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AR-Translate</title>\n\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: linear-gradient(135deg, #1d1d1f, #3a3a3d);\n\t\t  \tcolor: #fff;\n            margin: 0;\n            padding: 0px;\n\t\t  \toverflow-x:hidden;\n        }\n\n        #app {\n            max-width: 800px;\n            margin: auto;\n            padding: 20px;\n            background: #084B83h;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            position: relative; /* Added for absolute positioning of canvas */\n        }\n\n        h1 {\n            font-size: 4em;\n            font-weight: bold;\n            text-transform: uppercase;\n            background: linear-gradient(135deg, #ff5722, #f44336);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            margin-bottom: 0.5em;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            gap: 20px;\n        }\n\n        .language-selector {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .webcam {\n            position: relative;\n\t\t  \tmargin:20px 0;/* Required for positioning the canvas */\n        }\n\n        video {\n            width: 100%;\n            height: auto;\n            border-radius: 5px;\n        }\n\n        .transcript, .translation {\n            padding: 15px;\n            border-radius: 5px;\n            background-color: #e9ecef;\n        }\n\n        h2 {\n            margin-top: 0;\n        }\n\n        p {\n            margin: 5px 0;\n            color: #555;\n        }\n\n        /* Styles for speech bubble canvas */\n        #speechBubble {\n            position: absolute; /* Position it over the webcam */\n            top: 0; \n            left: 0; \n            pointer-events: none; /* Allow clicks to pass through */\n        }\n    </style>\n</head>\n<body>\n\n<div id=\"app\">\n    <h1>AR-Translate</h1>\n    <div class=\"container\">\n        <div class=\"language-selector\">\n            <label for=\"language-select\">Select Target Language:</label>\n            <select id=\"language-select\">\n                <option value=\"EN\">English</option>\n                <option value=\"DE\">German</option>\n                <option value=\"FR\">French</option>\n                <option value=\"ES\">Spanish</option>\n                <option value=\"IT\">Italian</option>\n                <option value=\"NL\">Dutch</option>\n                <option value=\"PL\">Polish</option>\n                <option value=\"RU\">Russian</option>\n                <option value=\"PT\">Portuguese</option>\n                <option value=\"AR\">Arabic</option>\n                <option value=\"JA\">Japanese</option>\n                <option value=\"KO\">Korean</option>\n                <option value=\"ZH\">Chinese (Simplified)</option>\n            </select>\n        </div>\n\n        <div class=\"webcam\">\n            <h2></h2>\n            <video id=\"webcam\" autoplay playsinline></video>\n            <!-- Canvas for speech bubble -->\n            <canvas id=\"speechBubble\"></canvas>\n        </div>\n\n        <div class=\"transcript\">\n            <p id=\"transcribedText\">Waiting for speech...</p>\n        </div>\n\n        <div class=\"translation\">\n            <p id=\"translatedText\"><b>Waiting for translation...</b></p>\n        </div>\n    </div>\n</div>\n\n</body>\n</html>",
      "status": "",
      "output": "\n\n\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AR-Translate</title>\n\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: linear-gradient(135deg, #1d1d1f, #3a3a3d);\n\t\t  \tcolor: #fff;\n            margin: 0;\n            padding: 0px;\n\t\t  \toverflow-x:hidden;\n        }\n\n        #app {\n            max-width: 800px;\n            margin: auto;\n            padding: 20px;\n            background: #084B83h;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            position: relative; /* Added for absolute positioning of canvas */\n        }\n\n        h1 {\n            font-size: 4em;\n            font-weight: bold;\n            text-transform: uppercase;\n            background: linear-gradient(135deg, #ff5722, #f44336);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            margin-bottom: 0.5em;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            gap: 20px;\n        }\n\n        .language-selector {\n            display: flex;\n            flex-direction: column;\n        }\n\n        .webcam {\n            position: relative;\n\t\t  \tmargin:20px 0;/* Required for positioning the canvas */\n        }\n\n        video {\n            width: 100%;\n            height: auto;\n            border-radius: 5px;\n        }\n\n        .transcript, .translation {\n            padding: 15px;\n            border-radius: 5px;\n            background-color: #e9ecef;\n        }\n\n        h2 {\n            margin-top: 0;\n        }\n\n        p {\n            margin: 5px 0;\n            color: #555;\n        }\n\n        /* Styles for speech bubble canvas */\n        #speechBubble {\n            position: absolute; /* Position it over the webcam */\n            top: 0; \n            left: 0; \n            pointer-events: none; /* Allow clicks to pass through */\n        }\n    </style>\n\n\n\n<div id=\"app\">\n    <h1>AR-Translate</h1>\n    <div class=\"container\">\n        <div class=\"language-selector\">\n            <label for=\"language-select\">Select Target Language:</label>\n            <select id=\"language-select\">\n                <option value=\"EN\">English</option>\n                <option value=\"DE\">German</option>\n                <option value=\"FR\">French</option>\n                <option value=\"ES\">Spanish</option>\n                <option value=\"IT\">Italian</option>\n                <option value=\"NL\">Dutch</option>\n                <option value=\"PL\">Polish</option>\n                <option value=\"RU\">Russian</option>\n                <option value=\"PT\">Portuguese</option>\n                <option value=\"AR\">Arabic</option>\n                <option value=\"JA\">Japanese</option>\n                <option value=\"KO\">Korean</option>\n                <option value=\"ZH\">Chinese (Simplified)</option>\n            </select>\n        </div>\n\n        <div class=\"webcam\">\n            <h2></h2>\n            <video id=\"webcam\" autoplay=\"\" playsinline=\"\"></video>\n            <!-- Canvas for speech bubble -->\n            <canvas id=\"speechBubble\"></canvas>\n        </div>\n\n        <div class=\"transcript\">\n            <p id=\"transcribedText\">Waiting for speech...</p>\n        </div>\n\n        <div class=\"translation\">\n            <p id=\"translatedText\"><b>Waiting for translation...</b></p>\n        </div>\n    </div>\n</div>\n\n\n",
      "type": "html"
    },
    {
      "code": "// Load face-api.js library\nawait scrib.loadScript(\"https://cdn.jsdelivr.net/npm/@vladmandic/face-api@1/dist/face-api.js\");\n\n\nlet currentTranscript = \"\";\nlet currentTranslatedText = \"\";\n\n\nasync function requestPermissions() {\n    try {\n        await navigator.mediaDevices.getUserMedia({ audio: true });\n        \n\n        const videoStream = await navigator.mediaDevices.getUserMedia({ video: true });\n        \n\n        const videoElement = document.getElementById('webcam');\n        videoElement.srcObject = videoStream;\n\n        console.log(\"Microphone and webcam permissions granted\");\n        \n        startListening();\n    } catch (error) {\n        console.error(\"Error accessing media devices.\", error);\n    }\n}\n\n\nlet recognition;\n\nif ('SpeechRecognition' in window) {\n    recognition = new SpeechRecognition();\n} else if ('webkitSpeechRecognition' in window) {\n    recognition = new webkitSpeechRecognition(); \n} else {\n    console.error(\"Speech recognition not supported in this browser.\");\n}\n\n\nrecognition.continuous = true;\nrecognition.interimResults = true;\n\n\nlet inactivityTimeout;\n\n\nfunction resetText() {\n    currentTranscript = \"\"; \n    currentTranslatedText = \"\"; \n\n    document.getElementById('transcribedText').innerText = \"Waiting for speech...\";\n    document.getElementById('translatedText').innerText = \"Waiting for translation...\";\n}\n\n\nrecognition.onresult = async (event) => {\n    const transcript = Array.from(event.results)\n        .map(result => result[0].transcript)\n        .join('');\n    \n    console.log(\"Recognized Text:\", transcript);\n    \n    currentTranscript = transcript;\n    document.getElementById('transcribedText').innerText = currentTranscript;\n\n\n    clearTimeout(inactivityTimeout);\n    inactivityTimeout = setTimeout(resetText, 10000);\n\n\n    const selectedLanguage = document.getElementById('language-select').value;\n\n\n    const translatedText = await translateText(currentTranscript, selectedLanguage);\n    console.log(\"Translated Text:\", translatedText);\n\n    currentTranslatedText = translatedText || \"Translation failed.\";\n\n    document.getElementById('translatedText').innerText = currentTranslatedText;\n\n\n    drawSpeechBubble(currentTranslatedText);\n};\n\n\ndocument.getElementById('language-select').addEventListener('change', async () => {\n    if (currentTranscript && currentTranscript !== \"Waiting for speech...\") {\n        const selectedLanguage = document.getElementById('language-select').value;\n\n        const translatedText = await translateText(currentTranscript, selectedLanguage);\n        currentTranslatedText = translatedText || \"Translation failed.\"; \n        document.getElementById('translatedText').innerText = currentTranslatedText;\n\n        drawSpeechBubble(currentTranslatedText);\n    }\n});\n\nfunction startListening() {\n    recognition.start();\n}\n\n\nasync function translateText(text, targetLanguage) {\n   const apiKey = '3082f1a7-1538-4bfa-baa1-fe99d3944503:fx'; \n   const url = `https://api-free.deepl.com/v2/translate?auth_key=${apiKey}&text=${encodeURIComponent(text)}&target_lang=${targetLanguage}`;\n   \n   const response = await fetch(url, {\n       method: 'POST',\n       headers: {\n           'Content-Type': 'application/x-www-form-urlencoded',\n       },\n   });\n   \n   if (!response.ok) {\n       console.error(\"Error with translation API:\", response.statusText);\n       return null;\n   }\n\n   const data = await response.json();\n   \n   if (data.translations && data.translations.length > 0) {\n       return data.translations[0].text;\n   } else {\n       console.error(\"No translations found.\");\n       return null;\n   }\n}\n\nconst vidfeed = document.getElementById(\"webcam\");\nconst speechBubbleCanvas = document.getElementById(\"speechBubble\");\nconst speechBubbleCtx = speechBubbleCanvas.getContext('2d');\n\n\nfunction drawSpeechBubble(text) {\n    const padding = 15; // Padding around text inside the bubble\n    const bubblePadding = 10; // Padding inside the speech bubble\n\n    // Display only the last 7 words if there are more than 7\n    const words = text.split(\" \");\n    const displayText = words.length > 7 ? words.slice(-7).join(\" \") : text;\n\n    if (!displayText) return;\n\n    // Calculate bubble dimensions with additional padding for better readability\n    const textWidth = speechBubbleCtx.measureText(displayText).width;\n    const bubbleWidth = textWidth + padding * 2 + bubblePadding * 2;\n    const bubbleHeight = 50; // Adjust height as necessary\n\n    // Clear the canvas before drawing the new bubble\n    speechBubbleCtx.clearRect(0, 0, speechBubbleCanvas.width, speechBubbleCanvas.height);\n\n    // Set bubble position\n    const xPos = (speechBubbleCanvas.width - bubbleWidth) / 2 + padding;\n    const yPos = 50;\n\n    // Draw the speech bubble background with rounded corners and shadow\n    speechBubbleCtx.fillStyle = \"rgba(252, 155, 172, 0.8)\"; // Slightly more opaque background\n    speechBubbleCtx.shadowColor = \"rgba(66, 191, 221, 0.2)\"; // Shadow color\n    speechBubbleCtx.shadowOffsetX = 2; // Horizontal shadow offset\n    speechBubbleCtx.shadowOffsetY = 2; // Vertical shadow offset\n    speechBubbleCtx.shadowBlur = 15; // Blur radius for shadow\n\n    speechBubbleCtx.beginPath();\n    speechBubbleCtx.moveTo(xPos + bubblePadding, yPos);\n    speechBubbleCtx.lineTo(xPos + bubbleWidth - bubblePadding, yPos);\n    speechBubbleCtx.quadraticCurveTo(xPos + bubbleWidth, yPos, xPos + bubbleWidth, yPos + bubblePadding);\n    speechBubbleCtx.lineTo(xPos + bubbleWidth, yPos + bubbleHeight - bubblePadding);\n    speechBubbleCtx.quadraticCurveTo(xPos + bubbleWidth, yPos + bubbleHeight, xPos + bubbleWidth - bubblePadding, yPos + bubbleHeight);\n    speechBubbleCtx.lineTo(xPos + bubblePadding, yPos + bubbleHeight);\n    speechBubbleCtx.quadraticCurveTo(xPos, yPos + bubbleHeight, xPos, yPos + bubbleHeight - bubblePadding);\n    speechBubbleCtx.lineTo(xPos, yPos + bubblePadding);\n    speechBubbleCtx.quadraticCurveTo(xPos, yPos, xPos + bubblePadding, yPos);\n    speechBubbleCtx.closePath();\n    \n    // Fill the background of the text bubble\n    speechBubbleCtx.fill();\n\n    // Reset shadow to avoid affecting text drawing\n    speechBubbleCtx.shadowColor = \"transparent\";\n\n    // Draw the text centered within the bubble\n    speechBubbleCtx.fillStyle = \"#333\"; // Darker text color for better contrast\n    speechBubbleCtx.font = \"16px Arial\";\n    speechBubbleCtx.textBaseline = \"middle\"; // Vertically center the text\n    speechBubbleCtx.fillText(displayText, xPos + padding, yPos + bubbleHeight / 2); // Center text vertically\n}\n\n\n\nwindow.addEventListener('resize', () => {\n\tconst vidSize = { width: vidfeed.clientWidth, height: vidfeed.clientHeight };\n\tspeechBubbleCanvas.width = vidSize.width;\n\tspeechBubbleCanvas.height = vidSize.height;\n});\n\n\nrequestPermissions();",
      "status": "[18]<br><span style=\"font-size:8px\">19ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}